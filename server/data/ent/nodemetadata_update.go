// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"marmota/server/data/ent/nodemetadata"
	"marmota/server/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NodeMetadataUpdate is the builder for updating NodeMetadata entities.
type NodeMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *NodeMetadataMutation
}

// Where adds a new predicate for the NodeMetadataUpdate builder.
func (nmu *NodeMetadataUpdate) Where(ps ...predicate.NodeMetadata) *NodeMetadataUpdate {
	nmu.mutation.predicates = append(nmu.mutation.predicates, ps...)
	return nmu
}

// Mutation returns the NodeMetadataMutation object of the builder.
func (nmu *NodeMetadataUpdate) Mutation() *NodeMetadataMutation {
	return nmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nmu *NodeMetadataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nmu.hooks) == 0 {
		affected, err = nmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodeMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nmu.mutation = mutation
			affected, err = nmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nmu.hooks) - 1; i >= 0; i-- {
			mut = nmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nmu *NodeMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := nmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nmu *NodeMetadataUpdate) Exec(ctx context.Context) error {
	_, err := nmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nmu *NodeMetadataUpdate) ExecX(ctx context.Context) {
	if err := nmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nmu *NodeMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nodemetadata.Table,
			Columns: nodemetadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nodemetadata.FieldID,
			},
		},
	}
	if ps := nmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodemetadata.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NodeMetadataUpdateOne is the builder for updating a single NodeMetadata entity.
type NodeMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeMetadataMutation
}

// Mutation returns the NodeMetadataMutation object of the builder.
func (nmuo *NodeMetadataUpdateOne) Mutation() *NodeMetadataMutation {
	return nmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nmuo *NodeMetadataUpdateOne) Select(field string, fields ...string) *NodeMetadataUpdateOne {
	nmuo.fields = append([]string{field}, fields...)
	return nmuo
}

// Save executes the query and returns the updated NodeMetadata entity.
func (nmuo *NodeMetadataUpdateOne) Save(ctx context.Context) (*NodeMetadata, error) {
	var (
		err  error
		node *NodeMetadata
	)
	if len(nmuo.hooks) == 0 {
		node, err = nmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodeMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nmuo.mutation = mutation
			node, err = nmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nmuo.hooks) - 1; i >= 0; i-- {
			mut = nmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nmuo *NodeMetadataUpdateOne) SaveX(ctx context.Context) *NodeMetadata {
	node, err := nmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nmuo *NodeMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := nmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nmuo *NodeMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := nmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nmuo *NodeMetadataUpdateOne) sqlSave(ctx context.Context) (_node *NodeMetadata, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nodemetadata.Table,
			Columns: nodemetadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nodemetadata.FieldID,
			},
		},
	}
	id, ok := nmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NodeMetadata.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := nmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nodemetadata.FieldID)
		for _, f := range fields {
			if !nodemetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nodemetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &NodeMetadata{config: nmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodemetadata.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
